package org.amida.tg_bot.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.amida.tg_bot.config.TelegramBotConfig;
import org.amida.tg_bot.kafka.MovieRequestProducer;
import org.amida.tg_bot.model.Movie;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Service
@RequiredArgsConstructor
@Slf4j
public class MovieInfoBotService extends TelegramLongPollingBot {

    private final TelegramBotConfig botConfig;
    private final MovieRequestProducer movieRequestProducer;
    private final Map<String, String> userMovieRequests = new ConcurrentHashMap<>();

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String chatId = update.getMessage().getChatId().toString();
            String messageText = update.getMessage().getText();

            log.info("Received message: {}", messageText);

            if (messageText.startsWith("/")) {
                handleCommand(chatId, messageText);
            } else {
                sendMessage(chatId, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
            }
        }
    }

    private void handleCommand(String chatId, String command) {
        if (command.startsWith("/movie")) {
            String[] parts = command.split(" ", 2);

            if (parts.length < 2 || parts[1].trim().isEmpty()) {
                sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /movie.\n" +
                        "–ù–∞–ø—Ä–∏–º–µ—Ä: /movie Inception");
            } else {
                String movieTitle = parts[1].trim();
                handleMovieRequest(chatId, movieTitle);
            }
        } else {
            switch (command) {
                case "/start":
                    sendMessage(chatId, """
                            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Movie Info Bot! üé•
                            –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º.
                            –ö–æ–º–∞–Ω–¥—ã:
                            /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                            /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞
                            /movie <–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞> ‚Äî –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞.""");
                    break;
                case "/help":
                    sendMessage(chatId, """
                            –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
                            /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
                            /movie <–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞> - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ""");
                    break;
                default:
                    sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. ü§î\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
                    break;
            }
        }
    }

    private void handleMovieRequest(String chatId, String movieTitle) {
        sendMessage(chatId, "–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ: " + movieTitle);

        userMovieRequests.put(chatId, movieTitle);

        movieRequestProducer.sendMovieRequest(movieTitle);
    }

    public void handleMovieData(Movie movie) {
        userMovieRequests.forEach((chatId, requestedMovie) -> {
            if (requestedMovie.equalsIgnoreCase(movie.getTitle())) {
                String response = String.format(
                        "üé¨ –§–∏–ª—å–º: %s\nüìÖ –ì–æ–¥: %s\nüìú –ñ–∞–Ω—Ä: %s\nüé• –†–µ–∂–∏—Å—Å—ë—Ä: %s",
                        movie.getTitle(), movie.getYear(), movie.getGenre(), movie.getDirector()
                );

                sendMessage(chatId, response);

                userMovieRequests.remove(chatId);
            }
        });
    }

    private void sendMessage(String chatId, String text) {
        SendMessage message = new SendMessage(chatId, text);

        try {
            execute(message);
        } catch (Exception e) {
            log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {}", e.getMessage());
        }
    }

    @Override
    public String getBotUsername() {
        return botConfig.getName();
    }

    @Override
    public String getBotToken() {
        return botConfig.getToken();
    }
}
